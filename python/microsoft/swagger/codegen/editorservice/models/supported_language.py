# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class SupportedLanguage(Model):
    """Language a client is enabled for.

    :param language_id: Editing language identifier with variants (e.g. en-us,
     en-gb, de-de-1996), see
     http://www.i18nguy.com/unicode/language-identifiers.html
    :type language_id: str
    :param text_unit: Unit(s) of text flags:
     * Default = 0x0000, // Default value
     * Word = 0x0001, // Unigram
     * Phrase = 0x0002, // 7-gram
     * Sentence = 0x0004, // Linguistically accurate sentence
     * Paragraph = 0x0008, // Text terminated by paragraph marker(s)
     * Page = 0x0010, // A visible page, slide, equivalent unit.
     * Section = 0x0020, // Section of document/presentation
     * Chapter = 0x0040, // Chapter if such a concept exists in model
     * Document = 0x0100, // Full document contents.
     * RawChars = 0x4000, // Special purpose for scenarios that need raw
     content access
     . Possible values include: 'Default', 'Word', 'Phrase', 'Sentence',
     'Paragraph', 'Page', 'Section', 'Chapter', 'Document', 'RawChars'
    :type text_unit: str or
     ~microsoft.swagger.codegen.editorservice.models.enum
    :param supported_critique_tag: Tag that represents additional info about
     supported features. For example: Consistency support:
     * None = 0x00,
     * Consistency = 0x01
    :type supported_critique_tag: str
    """

    _validation = {
        'language_id': {'required': True},
        'text_unit': {'required': True},
    }

    _attribute_map = {
        'language_id': {'key': 'LanguageId', 'type': 'str'},
        'text_unit': {'key': 'TextUnit', 'type': 'str'},
        'supported_critique_tag': {'key': 'SupportedCritiqueTag', 'type': 'str'},
    }

    def __init__(self, language_id, text_unit, supported_critique_tag=None):
        super(SupportedLanguage, self).__init__()
        self.language_id = language_id
        self.text_unit = text_unit
        self.supported_critique_tag = supported_critique_tag
