# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .common_text_unit_property import CommonTextUnitProperty


class Metadata(CommonTextUnitProperty):
    """Represents metadata tied to particular document part.

    :param text_unit: Unit(s) of text flags:
     * Default = 0x0000, // Default value
     * Word = 0x0001, // Unigram
     * Phrase = 0x0002, // 7-gram
     * Sentence = 0x0004, // Linguistically accurate sentence
     * Paragraph = 0x0008, // Text terminated by paragraph marker(s)
     * Page = 0x0010, // A visible page, slide, equivalent unit.
     * Section = 0x0020, // Section of document/presentation
     * Chapter = 0x0040, // Chapter if such a concept exists in model
     * Document = 0x0100, // Full document contents.
     * RawChars = 0x4000, // Special purpose for scenarios that need raw
     content access
     . Possible values include: 'Default', 'Word', 'Phrase', 'Sentence',
     'Paragraph', 'Page', 'Section', 'Chapter', 'Document', 'RawChars'
    :type text_unit: str or
     ~microsoft.swagger.codegen.editorservice.models.enum
    :param text_unit_id: Optional id of the text unit for which this metadata
     is returned.
    :type text_unit_id: int
    :param text_unit_revision_id: Optional client revision id of the text unit
     for which the metadata applies.
    :type text_unit_revision_id: int
    :param contents: List of metadata values and types.
    :type contents:
     list[~microsoft.swagger.codegen.editorservice.models.MetadataContent]
    """

    _attribute_map = {
        'text_unit': {'key': 'TextUnit', 'type': 'str'},
        'text_unit_id': {'key': 'TextUnitId', 'type': 'int'},
        'text_unit_revision_id': {'key': 'TextUnitRevisionId', 'type': 'int'},
        'contents': {'key': 'Contents', 'type': '[MetadataContent]'},
    }

    def __init__(self, text_unit=None, text_unit_id=None, text_unit_revision_id=None, contents=None):
        super(Metadata, self).__init__(text_unit=text_unit)
        self.text_unit_id = text_unit_id
        self.text_unit_revision_id = text_unit_revision_id
        self.contents = contents
