# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TopologyNode(Model):
    """Structure that describes one node in topology of the document.

    :param id: Id of the node.
    :type id: str
    :param revision_id: Revision id of the node.
    :type revision_id: str
    :param analyzer_data: Dictionary that contains additional metadata about a
     node.
    :type analyzer_data: object
    :param type: Represents type of the node:
     * Unknown = 0
     * Paragraph = 1
     * Group = 2
     * Page = 3
     * Document = 4
     . Possible values include: 'Unknown', 'Paragraph', 'Group', 'Page',
     'Document'
    :type type: str or ~microsoft.swagger.codegen.editorservice.models.enum
    :param children: Collection of child nodes, that can be either leaf node
     or an internal node. Leaf node is a tile while internal node is a tiling.
    :type children:
     list[~microsoft.swagger.codegen.editorservice.models.TopologyNode]
    :param number_of_children: Number of children in this node. Note: If this
     is populated it must be an actual number on the client, not the number of
     sent children.
    :type number_of_children: int
    :param are_childs_ordered: Are the received tiles in order. Default value:
     False .
    :type are_childs_ordered: bool
    """

    _validation = {
        'id': {'required': True},
        'revision_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'str'},
        'revision_id': {'key': 'RevisionId', 'type': 'str'},
        'analyzer_data': {'key': 'AnalyzerData', 'type': 'object'},
        'type': {'key': 'Type', 'type': 'str'},
        'children': {'key': 'Children', 'type': '[TopologyNode]'},
        'number_of_children': {'key': 'NumberOfChildren', 'type': 'int'},
        'are_childs_ordered': {'key': 'AreChildsOrdered', 'type': 'bool'},
    }

    def __init__(self, id, revision_id, analyzer_data=None, type=None, children=None, number_of_children=None, are_childs_ordered=False):
        super(TopologyNode, self).__init__()
        self.id = id
        self.revision_id = revision_id
        self.analyzer_data = analyzer_data
        self.type = type
        self.children = children
        self.number_of_children = number_of_children
        self.are_childs_ordered = are_childs_ordered
