# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TileCheckCritique(Model):
    """TileCheckCritique.

    :param trace_id: A unique identifier for the critique returned to the
     caller: this is used for the feedback/instrumentation loop.
    :type trace_id: str
    :param type_id: Id of the critique type which generated the critique.
    :type type_id: str
    :param category_title: The title of the critique category.
    :type category_title: str
    :param start: Critique flag start index. Default value: 0 .
    :type start: int
    :param length: Critique flag length. Default value: 0 .
    :type length: int
    :param priority: Error priority level to be shown to the client app which
     will be interpreted as different squiggle colors (or not squiggle):
     * High = 0, // The highest priority (must be fixed). Example: Spelling
     * Medium = 1, // Can be fixed or may not be a problem. Example: Grammar
     * Low = 2, // Can be completely ignored and the content will still be OK..
     Example: Consistency, Style, etc.
     * Informational = 3, // Informational critique, not an error
    :type priority: int
    :param tile_id: Request: Unique identifier of tile within a document.
     Response: Id of the tile the critique belongs to
    :type tile_id: str
    :param revision_id: Request: Number that is changed whenever a tile is
     changed. Response: Revision id of the tile critique belongs to
    :type revision_id: str
    :param supported_actions: Actions that a critique supports, expressed as
     flags that can be combined:
     * NotificationOnly = 0x00, // In case of readability for example, we just
     show a notification but we don't provide actions to choose from
     * Delete = 0x01, // Delete some portion of the text (Can be a repeated
     word for example)
     * Ignore = 0x02, // Ignore the current instance of the error
     * IgnoreAll = 0x04, // Ignore all the instances of the error
     * IgnoreCritiqueType = 0x08, // Ignore a whole critique type
     * AddToDictionary = 0x10, // Add to dictionary
     * ShowDetails = 0x20, // Show a pane with details
    :type supported_actions: int
    :param bucket_id: Bucket id that can be used to group errors that can be
     fixed together. It can be a negative number.
    :type bucket_id: int
    :param explanation_title: The title of the explanation.
    :type explanation_title: str
    :param explanation_label: The label of the explanation (only support on
     specific critique types)
    :type explanation_label: str
    :param explanation: The explanation of the critique type.
    :type explanation: str
    :param suggestions:
    :type suggestions:
     list[~microsoft.swagger.codegen.editorservice.models.Suggestion]
    :param status: Critique status:
     * None = 0,
     * Active = 1, // Critique can be visible on canvas. CritiqueTag also
     affects critique visibility on canvas
     * Provisional = 2, // Critique should not be visible on canvas
     . Possible values include: 'None', 'Active', 'Provisional'
    :type status: str or ~microsoft.swagger.codegen.editorservice.models.enum
    :param tag: Critique tag. Generic tag that contains additional information
     for critique:
     * None = 0x00,
     * Consistency = 0x01
     . Possible values include: 'None', 'Consistency'
    :type tag: str or ~microsoft.swagger.codegen.editorservice.models.enum
    """

    _attribute_map = {
        'trace_id': {'key': 'TraceId', 'type': 'str'},
        'type_id': {'key': 'TypeId', 'type': 'str'},
        'category_title': {'key': 'CategoryTitle', 'type': 'str'},
        'start': {'key': 'Start', 'type': 'int'},
        'length': {'key': 'Length', 'type': 'int'},
        'priority': {'key': 'Priority', 'type': 'int'},
        'tile_id': {'key': 'TileId', 'type': 'str'},
        'revision_id': {'key': 'RevisionId', 'type': 'str'},
        'supported_actions': {'key': 'SupportedActions', 'type': 'int'},
        'bucket_id': {'key': 'BucketId', 'type': 'int'},
        'explanation_title': {'key': 'ExplanationTitle', 'type': 'str'},
        'explanation_label': {'key': 'ExplanationLabel', 'type': 'str'},
        'explanation': {'key': 'Explanation', 'type': 'str'},
        'suggestions': {'key': 'Suggestions', 'type': '[Suggestion]'},
        'status': {'key': 'Status', 'type': 'str'},
        'tag': {'key': 'Tag', 'type': 'str'},
    }

    def __init__(self, trace_id=None, type_id=None, category_title=None, start=0, length=0, priority=None, tile_id=None, revision_id=None, supported_actions=None, bucket_id=None, explanation_title=None, explanation_label=None, explanation=None, suggestions=None, status=None, tag=None):
        super(TileCheckCritique, self).__init__()
        self.trace_id = trace_id
        self.type_id = type_id
        self.category_title = category_title
        self.start = start
        self.length = length
        self.priority = priority
        self.tile_id = tile_id
        self.revision_id = revision_id
        self.supported_actions = supported_actions
        self.bucket_id = bucket_id
        self.explanation_title = explanation_title
        self.explanation_label = explanation_label
        self.explanation = explanation
        self.suggestions = suggestions
        self.status = status
        self.tag = tag
